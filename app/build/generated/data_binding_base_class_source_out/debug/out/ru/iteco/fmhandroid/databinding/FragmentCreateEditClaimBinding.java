// Generated by view binder compiler. Do not edit!
package ru.iteco.fmhandroid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ru.iteco.fmhandroid.R;

public final class FragmentCreateEditClaimBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button cancelButton;

  @NonNull
  public final TopCustomAppBarBinding containerCustomAppBarIncludeOnFragmentCreateEditClaim;

  @NonNull
  public final TextInputEditText dateInPlanTextInputEditText;

  @NonNull
  public final TextInputLayout dateInPlanTextInputLayout;

  @NonNull
  public final TextInputEditText descriptionEditText;

  @NonNull
  public final TextInputLayout descriptionTextInputLayout;

  @NonNull
  public final AutoCompleteTextView executorDropMenuAutoCompleteTextView;

  @NonNull
  public final TextInputLayout executorDropMenuTextInputLayout;

  @NonNull
  public final Button saveButton;

  @NonNull
  public final TextInputEditText timeInPlanTextInputEditText;

  @NonNull
  public final TextInputLayout timeInPlanTextInputLayout;

  @NonNull
  public final TextInputEditText titleEditText;

  @NonNull
  public final TextInputLayout titleTextInputLayout;

  @NonNull
  public final LinearLayout visibility;

  private FragmentCreateEditClaimBinding(@NonNull LinearLayout rootView,
      @NonNull Button cancelButton,
      @NonNull TopCustomAppBarBinding containerCustomAppBarIncludeOnFragmentCreateEditClaim,
      @NonNull TextInputEditText dateInPlanTextInputEditText,
      @NonNull TextInputLayout dateInPlanTextInputLayout,
      @NonNull TextInputEditText descriptionEditText,
      @NonNull TextInputLayout descriptionTextInputLayout,
      @NonNull AutoCompleteTextView executorDropMenuAutoCompleteTextView,
      @NonNull TextInputLayout executorDropMenuTextInputLayout, @NonNull Button saveButton,
      @NonNull TextInputEditText timeInPlanTextInputEditText,
      @NonNull TextInputLayout timeInPlanTextInputLayout, @NonNull TextInputEditText titleEditText,
      @NonNull TextInputLayout titleTextInputLayout, @NonNull LinearLayout visibility) {
    this.rootView = rootView;
    this.cancelButton = cancelButton;
    this.containerCustomAppBarIncludeOnFragmentCreateEditClaim = containerCustomAppBarIncludeOnFragmentCreateEditClaim;
    this.dateInPlanTextInputEditText = dateInPlanTextInputEditText;
    this.dateInPlanTextInputLayout = dateInPlanTextInputLayout;
    this.descriptionEditText = descriptionEditText;
    this.descriptionTextInputLayout = descriptionTextInputLayout;
    this.executorDropMenuAutoCompleteTextView = executorDropMenuAutoCompleteTextView;
    this.executorDropMenuTextInputLayout = executorDropMenuTextInputLayout;
    this.saveButton = saveButton;
    this.timeInPlanTextInputEditText = timeInPlanTextInputEditText;
    this.timeInPlanTextInputLayout = timeInPlanTextInputLayout;
    this.titleEditText = titleEditText;
    this.titleTextInputLayout = titleTextInputLayout;
    this.visibility = visibility;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCreateEditClaimBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCreateEditClaimBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_create_edit_claim, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCreateEditClaimBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancel_button;
      Button cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.container_custom_app_bar_include_on_fragment_create_edit_claim;
      View containerCustomAppBarIncludeOnFragmentCreateEditClaim = ViewBindings.findChildViewById(rootView, id);
      if (containerCustomAppBarIncludeOnFragmentCreateEditClaim == null) {
        break missingId;
      }
      TopCustomAppBarBinding binding_containerCustomAppBarIncludeOnFragmentCreateEditClaim = TopCustomAppBarBinding.bind(containerCustomAppBarIncludeOnFragmentCreateEditClaim);

      id = R.id.date_in_plan_text_input_edit_text;
      TextInputEditText dateInPlanTextInputEditText = ViewBindings.findChildViewById(rootView, id);
      if (dateInPlanTextInputEditText == null) {
        break missingId;
      }

      id = R.id.date_in_plan_text_input_layout;
      TextInputLayout dateInPlanTextInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (dateInPlanTextInputLayout == null) {
        break missingId;
      }

      id = R.id.description_edit_text;
      TextInputEditText descriptionEditText = ViewBindings.findChildViewById(rootView, id);
      if (descriptionEditText == null) {
        break missingId;
      }

      id = R.id.description_text_input_layout;
      TextInputLayout descriptionTextInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (descriptionTextInputLayout == null) {
        break missingId;
      }

      id = R.id.executor_drop_menu_auto_complete_text_view;
      AutoCompleteTextView executorDropMenuAutoCompleteTextView = ViewBindings.findChildViewById(rootView, id);
      if (executorDropMenuAutoCompleteTextView == null) {
        break missingId;
      }

      id = R.id.executor_drop_menu_text_input_layout;
      TextInputLayout executorDropMenuTextInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (executorDropMenuTextInputLayout == null) {
        break missingId;
      }

      id = R.id.save_button;
      Button saveButton = ViewBindings.findChildViewById(rootView, id);
      if (saveButton == null) {
        break missingId;
      }

      id = R.id.time_in_plan_text_input_edit_text;
      TextInputEditText timeInPlanTextInputEditText = ViewBindings.findChildViewById(rootView, id);
      if (timeInPlanTextInputEditText == null) {
        break missingId;
      }

      id = R.id.time_in_plan_text_input_layout;
      TextInputLayout timeInPlanTextInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (timeInPlanTextInputLayout == null) {
        break missingId;
      }

      id = R.id.title_edit_text;
      TextInputEditText titleEditText = ViewBindings.findChildViewById(rootView, id);
      if (titleEditText == null) {
        break missingId;
      }

      id = R.id.title_text_input_layout;
      TextInputLayout titleTextInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (titleTextInputLayout == null) {
        break missingId;
      }

      id = R.id.visibility;
      LinearLayout visibility = ViewBindings.findChildViewById(rootView, id);
      if (visibility == null) {
        break missingId;
      }

      return new FragmentCreateEditClaimBinding((LinearLayout) rootView, cancelButton,
          binding_containerCustomAppBarIncludeOnFragmentCreateEditClaim,
          dateInPlanTextInputEditText, dateInPlanTextInputLayout, descriptionEditText,
          descriptionTextInputLayout, executorDropMenuAutoCompleteTextView,
          executorDropMenuTextInputLayout, saveButton, timeInPlanTextInputEditText,
          timeInPlanTextInputLayout, titleEditText, titleTextInputLayout, visibility);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
