// Generated by view binder compiler. Do not edit!
package ru.iteco.fmhandroid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ru.iteco.fmhandroid.R;

public final class FragmentNewsListBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TopCustomAppBarBinding containerCustomAppBarIncludeOnFragmentNewsList;

  @NonNull
  public final ContainerListNewsBinding containerListNewsInclude;

  @NonNull
  public final SwipeRefreshLayout newsListSwipeRefresh;

  private FragmentNewsListBinding(@NonNull LinearLayout rootView,
      @NonNull TopCustomAppBarBinding containerCustomAppBarIncludeOnFragmentNewsList,
      @NonNull ContainerListNewsBinding containerListNewsInclude,
      @NonNull SwipeRefreshLayout newsListSwipeRefresh) {
    this.rootView = rootView;
    this.containerCustomAppBarIncludeOnFragmentNewsList = containerCustomAppBarIncludeOnFragmentNewsList;
    this.containerListNewsInclude = containerListNewsInclude;
    this.newsListSwipeRefresh = newsListSwipeRefresh;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentNewsListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentNewsListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_news_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentNewsListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.container_custom_app_bar_include_on_fragment_news_list;
      View containerCustomAppBarIncludeOnFragmentNewsList = ViewBindings.findChildViewById(rootView, id);
      if (containerCustomAppBarIncludeOnFragmentNewsList == null) {
        break missingId;
      }
      TopCustomAppBarBinding binding_containerCustomAppBarIncludeOnFragmentNewsList = TopCustomAppBarBinding.bind(containerCustomAppBarIncludeOnFragmentNewsList);

      id = R.id.container_list_news_include;
      View containerListNewsInclude = ViewBindings.findChildViewById(rootView, id);
      if (containerListNewsInclude == null) {
        break missingId;
      }
      ContainerListNewsBinding binding_containerListNewsInclude = ContainerListNewsBinding.bind(containerListNewsInclude);

      id = R.id.news_list_swipe_refresh;
      SwipeRefreshLayout newsListSwipeRefresh = ViewBindings.findChildViewById(rootView, id);
      if (newsListSwipeRefresh == null) {
        break missingId;
      }

      return new FragmentNewsListBinding((LinearLayout) rootView,
          binding_containerCustomAppBarIncludeOnFragmentNewsList, binding_containerListNewsInclude,
          newsListSwipeRefresh);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
