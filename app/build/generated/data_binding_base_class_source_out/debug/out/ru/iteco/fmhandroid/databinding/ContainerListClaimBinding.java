// Generated by view binder compiler. Do not edit!
package ru.iteco.fmhandroid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ru.iteco.fmhandroid.R;

public final class ContainerListClaimBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton addNewClaimMaterialButton;

  @NonNull
  public final ConstraintLayout allClaimsCardsBlockConstraintLayout;

  @NonNull
  public final TextView allClaimsTextView;

  @NonNull
  public final RecyclerView claimListRecyclerView;

  @NonNull
  public final MaterialButton claimRetryMaterialButton;

  @NonNull
  public final Group emptyClaimListGroup;

  @NonNull
  public final ImageView emptyClaimListImageView;

  @NonNull
  public final TextView emptyClaimListTextView;

  @NonNull
  public final MaterialButton expandMaterialButton;

  @NonNull
  public final MaterialButton filtersMaterialButton;

  private ContainerListClaimBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton addNewClaimMaterialButton,
      @NonNull ConstraintLayout allClaimsCardsBlockConstraintLayout,
      @NonNull TextView allClaimsTextView, @NonNull RecyclerView claimListRecyclerView,
      @NonNull MaterialButton claimRetryMaterialButton, @NonNull Group emptyClaimListGroup,
      @NonNull ImageView emptyClaimListImageView, @NonNull TextView emptyClaimListTextView,
      @NonNull MaterialButton expandMaterialButton, @NonNull MaterialButton filtersMaterialButton) {
    this.rootView = rootView;
    this.addNewClaimMaterialButton = addNewClaimMaterialButton;
    this.allClaimsCardsBlockConstraintLayout = allClaimsCardsBlockConstraintLayout;
    this.allClaimsTextView = allClaimsTextView;
    this.claimListRecyclerView = claimListRecyclerView;
    this.claimRetryMaterialButton = claimRetryMaterialButton;
    this.emptyClaimListGroup = emptyClaimListGroup;
    this.emptyClaimListImageView = emptyClaimListImageView;
    this.emptyClaimListTextView = emptyClaimListTextView;
    this.expandMaterialButton = expandMaterialButton;
    this.filtersMaterialButton = filtersMaterialButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ContainerListClaimBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContainerListClaimBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.container_list_claim, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContainerListClaimBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_new_claim_material_button;
      MaterialButton addNewClaimMaterialButton = ViewBindings.findChildViewById(rootView, id);
      if (addNewClaimMaterialButton == null) {
        break missingId;
      }

      id = R.id.all_claims_cards_block_constraint_layout;
      ConstraintLayout allClaimsCardsBlockConstraintLayout = ViewBindings.findChildViewById(rootView, id);
      if (allClaimsCardsBlockConstraintLayout == null) {
        break missingId;
      }

      id = R.id.all_claims_text_view;
      TextView allClaimsTextView = ViewBindings.findChildViewById(rootView, id);
      if (allClaimsTextView == null) {
        break missingId;
      }

      id = R.id.claim_list_recycler_view;
      RecyclerView claimListRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (claimListRecyclerView == null) {
        break missingId;
      }

      id = R.id.claim_retry_material_button;
      MaterialButton claimRetryMaterialButton = ViewBindings.findChildViewById(rootView, id);
      if (claimRetryMaterialButton == null) {
        break missingId;
      }

      id = R.id.empty_claim_list_group;
      Group emptyClaimListGroup = ViewBindings.findChildViewById(rootView, id);
      if (emptyClaimListGroup == null) {
        break missingId;
      }

      id = R.id.empty_claim_list_image_view;
      ImageView emptyClaimListImageView = ViewBindings.findChildViewById(rootView, id);
      if (emptyClaimListImageView == null) {
        break missingId;
      }

      id = R.id.empty_claim_list_text_view;
      TextView emptyClaimListTextView = ViewBindings.findChildViewById(rootView, id);
      if (emptyClaimListTextView == null) {
        break missingId;
      }

      id = R.id.expand_material_button;
      MaterialButton expandMaterialButton = ViewBindings.findChildViewById(rootView, id);
      if (expandMaterialButton == null) {
        break missingId;
      }

      id = R.id.filters_material_button;
      MaterialButton filtersMaterialButton = ViewBindings.findChildViewById(rootView, id);
      if (filtersMaterialButton == null) {
        break missingId;
      }

      return new ContainerListClaimBinding((LinearLayout) rootView, addNewClaimMaterialButton,
          allClaimsCardsBlockConstraintLayout, allClaimsTextView, claimListRecyclerView,
          claimRetryMaterialButton, emptyClaimListGroup, emptyClaimListImageView,
          emptyClaimListTextView, expandMaterialButton, filtersMaterialButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
