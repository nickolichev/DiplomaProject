// Generated by Dagger (https://dagger.dev).
package ru.iteco.fmhandroid.api;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import ru.iteco.fmhandroid.auth.AppAuth;
import ru.iteco.fmhandroid.repository.authRepository.AuthRepository;

@ScopeMetadata
@QualifierMetadata("ru.iteco.fmhandroid.api.qualifier.Authorized")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_AuthorizedOkhttpFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  private final Provider<AppAuth> appAuthProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  public NetworkModule_AuthorizedOkhttpFactory(Provider<HttpLoggingInterceptor> interceptorProvider,
      Provider<AppAuth> appAuthProvider, Provider<AuthRepository> authRepositoryProvider) {
    this.interceptorProvider = interceptorProvider;
    this.appAuthProvider = appAuthProvider;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public OkHttpClient get() {
    return authorizedOkhttp(interceptorProvider.get(), appAuthProvider.get(), authRepositoryProvider);
  }

  public static NetworkModule_AuthorizedOkhttpFactory create(
      Provider<HttpLoggingInterceptor> interceptorProvider, Provider<AppAuth> appAuthProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    return new NetworkModule_AuthorizedOkhttpFactory(interceptorProvider, appAuthProvider, authRepositoryProvider);
  }

  public static OkHttpClient authorizedOkhttp(HttpLoggingInterceptor interceptor, AppAuth appAuth,
      Provider<AuthRepository> authRepositoryProvider) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.authorizedOkhttp(interceptor, appAuth, authRepositoryProvider));
  }
}
