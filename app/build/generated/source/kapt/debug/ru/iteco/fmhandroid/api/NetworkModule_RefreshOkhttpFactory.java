// Generated by Dagger (https://dagger.dev).
package ru.iteco.fmhandroid.api;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import ru.iteco.fmhandroid.auth.AppAuth;

@ScopeMetadata
@QualifierMetadata("ru.iteco.fmhandroid.api.qualifier.Refresh")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_RefreshOkhttpFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  private final Provider<AppAuth> appAuthProvider;

  public NetworkModule_RefreshOkhttpFactory(Provider<HttpLoggingInterceptor> interceptorProvider,
      Provider<AppAuth> appAuthProvider) {
    this.interceptorProvider = interceptorProvider;
    this.appAuthProvider = appAuthProvider;
  }

  @Override
  public OkHttpClient get() {
    return refreshOkhttp(interceptorProvider.get(), appAuthProvider.get());
  }

  public static NetworkModule_RefreshOkhttpFactory create(
      Provider<HttpLoggingInterceptor> interceptorProvider, Provider<AppAuth> appAuthProvider) {
    return new NetworkModule_RefreshOkhttpFactory(interceptorProvider, appAuthProvider);
  }

  public static OkHttpClient refreshOkhttp(HttpLoggingInterceptor interceptor, AppAuth appAuth) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.refreshOkhttp(interceptor, appAuth));
  }
}
